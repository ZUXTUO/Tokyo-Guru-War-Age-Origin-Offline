/**
 * Generated by FakerAndroid for doc or help by https://github.com/Efaker/FakerAndroid
 */
#include <jni.h>
#include <string>
#include "common.h"
#include <fstream>
#include <sstream>
#include "include/faker.h"
JavaVM *global_jvm;
JNIEXPORT jint JNI_OnLoad(JavaVM *vm, void *reserved) {
    JNIEnv *env;
    if ((*vm).GetEnv(reinterpret_cast<void **>(&env), JNI_VERSION_1_6) == JNI_OK) {
        LOGI("JNI_OnLoad %s","sucess");
    }else{
        LOGI("JNI_OnLoad %s","erro");
    }
    global_jvm = vm;

    return onJniLoad(vm,reserved);
}


static jobject callBack;
/**
 * in your replace_call method you can call this method to call java
 * @param event
 */
void callJava(const char *event) {
    if(callBack==NULL) {
        return;
    }
    JNIEnv* env;
    global_jvm->GetEnv(reinterpret_cast<void **>(&env), JNI_VERSION_1_4);
    jclass clazz = env->GetObjectClass(callBack);
    jmethodID onCall = env->GetMethodID(clazz, "onJniCall", "(Ljava/lang/String;)V");
    jstring envent = env->NewStringUTF(event);
    env->CallVoidMethod(callBack, onCall, envent);
    env->DeleteLocalRef(envent);
}



extern "C"
JNIEXPORT void JNICALL
Java_com_android_boot_App_fakeApp(JNIEnv *env, jobject thiz, jobject application) {
    /**
     * you can do yor hook work here
     * below  is demo code demo code hook libil2cpp.so
     */
     //long base = baseImageAddr("libil2cpp.so");
     //LOGE("baseImageAddr : %ld",base);
     //By ida get or ghidra get the method offset
     //Behaviour_get_isActiveAndEnabled =base + offset,HookedBehaviour_get_isActiveAndEnabled = your define method,Behaviour_get_isActiveAndEnabled =  base + offset
     //fakeCpp((void *) Behaviour_get_isActiveAndEnabled, (void *)HookedBehaviour_get_isActiveAndEnabled ,reinterpret_cast<void **>(&Behaviour_get_isActiveAndEnabled));

}
extern "C"
JNIEXPORT void JNICALL
Java_com_android_boot_App_fakeDex(JNIEnv *env, jobject thiz, jobject base) {
    fakeDex(env,base,"dex");//dex collapse feature support
}

extern "C"
JNIEXPORT void JNICALL
Java_com_android_boot_MainActivity_registerCallBack(JNIEnv *env, jobject thiz,jobject object) {
    /**
     * init the callback global for other c++ method to call
     */
    callBack = env->NewGlobalRef(object);//
}